'use strict';

var utils = require('./../../core/utils');
var colors = require('./../../core/colors');
var dataset = require('./../../core/dataset');

var d3WidgetMask = require('./../../widget/d3WidgetMask');
var d3WidgetRect = require('./../../widget/d3WidgetRect');
var d3WidgetHover = require('./../../widget/d3WidgetHover');
var d3WidgetSelection = require('./../../widget/d3WidgetSelection');
var d3WidgetPaint = require('./../../widget/d3WidgetPaint');
var d3WidgetMarker = require('./../../widget/d3WidgetMarker');
var d3WidgetPath = require('./../../widget/d3WidgetPath');
var d3WidgetCandlestick = require('./../../widget/d3WidgetCandlestick');
var d3WidgetMessage = require('./../../widget/d3WidgetMessage');
var d3WidgetAxisTips = require('./../../widget/d3WidgetAxisTips');
var d3WidgetGridLine = require('./../../widget/d3WidgetGridLine');
var d3WidgetAxisNodes = require('./../../widget/d3WidgetAxisNodes');
var d3WidgetPointerEvents = require('./../../widget/d3WidgetPointerEvents');

class Candlestick {
	constructor(options) {

		var date = new Date();
		var day = date.getFullYear() + '/' + (date.getMonth() + 1) + '/'+ date.getDate();
		var scope = dataset(options, [[day + " 9:30", 4, 2, 1, 3], [day + " 15:00", 4, 2, 1, 3]]);

		scope.guid = utils.guid();

		scope.uid = 's-chart-el-'+ scope.guid;

		scope.progress = 0;

		function x(d, i) {
			var size = (scope.$DATA_STORAGE || []).length;
			var band = 0;
			if(size) {
				band = Math.floor((scope.width - scope.$Layout.LEFT_VALUE - scope.$Layout.RIGHT_VALUE) / size);
				band = band > 3 ? band : 3;
			}
			return scope.$Scale.get(2)(new Date(d[0]).getTime()) - Math.floor(band * 0.45) + 1;
		}

		function y(d) {
			return scope.$Scale.get(3)(d);
		}

		function markerY(d) {
			return scope.$Scale.get(3)(d[1])
		}

		function lineY(d) {
			return scope.$Scale.get(3)(d[1])
		}

		function w(d) {
			var size = (scope.$DATA_STORAGE || []).length;
			if(size) {
				var band = Math.floor((scope.width - scope.$Layout.LEFT_VALUE - scope.$Layout.RIGHT_VALUE) / size);
				band = Math.floor(band * 0.9) - Math.floor(band * 0.9) % 2 - 2;
				return band > 3 ? band : 3;
			}
			return 1;
		}

		function h(d) {
			return 1;
		}

		function defined(d) {
			return !isNaN(d[1]);
		}

		var context = d3WidgetPaint(options.id, scope.width, scope.height, scope)
		.call(d3WidgetMask(scope))
		.call(d3WidgetPointerEvents(scope))
		.call(d3WidgetGridLine(scope), function() {
			return scope.$Scale.get(2);
		}, function() {
			return scope.$Scale.get(3);
		})
		.call(d3WidgetAxisNodes(scope))
		.call(d3WidgetAxisTips(scope))
		.call(d3WidgetMessage(scope))		
		.call(d3WidgetCandlestick(scope), x, y, w, h)
		.call(d3WidgetPath(scope), scope.uid, x, lineY, defined, true)
		.call(d3WidgetSelection(scope))
		.call(d3WidgetHover(scope))
		.call(d3WidgetMarker(scope), x, markerY, function(d) {
			return d[2] === 'S' ? 'minus' : 'plus';
		});

		this.$WATCHER = scope;
	}

	progress(x) {
		this.$WATCHER.progress = x;
	}

	mouse(x) {
		/*var $WATCHER = this.$WATCHER;
		var LEFT_VALUE = $WATCHER.$Layout.LEFT_VALUE;
		if(evt[0] - LEFT_VALUE > 0) {
			var index = $WATCHER.$Scale.get(2).parse(evt[0] - LEFT_VALUE);

			this.$WATCHER.$EVENT_HOVER = {
				x: evt[0],
				y: evt[1],
				data: [null, null, $WATCHER.$Config[2].data.label($WATCHER.CANDLESTICK_DATA[index][0]), null]
			}
		}*/
		//this.$WATCHER.$EVENT_HOVER = x;
		
	}

	converge(callback) {
		this.DATA_FILTER = callback;
	}

	render(dataset) {
		var $WATCHER = this.$WATCHER;
		var $Layout = $WATCHER.$Layout;
		var LEFT_VALUE  = $Layout.LEFT_VALUE;
		var RIGHT_VALUE = $Layout.RIGHT_VALUE;

		var width = $WATCHER.width - LEFT_VALUE - RIGHT_VALUE;

		var filter = utils.gather(width);

		$WATCHER.DATA_GS = filter.gs;

		$WATCHER.CANDLESTICK_DATA = filter(dataset.candlestick || dataset, this.DATA_FILTER || function(d) {return d[d.length - 1]});
		$WATCHER.MARKER_DATA = dataset.marker || [];
		$WATCHER.PATH_DATA = dataset.line || [];
	}
}


/**
 * Export `chart.Candlestick`
 */
module.exports = Candlestick;